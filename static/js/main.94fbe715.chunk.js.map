{"version":3,"sources":["components/search-box/search-box.module.css","components/card/card.module.css","components/card-list/card-list.module.css","components/select-image-set/select-image-set.module.css","components/search-box/search-box.component.jsx","components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/select-image-set/select-image-set.component.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","SearchBox","props","className","SearchBoxStyles","type","placeholder","title","toLowerCase","onChange","onSearchChange","Card","CardStyles","card","alt","src","monster","id","imageSet","name","email","CardList","CardListStyles","cardList","monsters","map","key","SelectImageSet","onImageSetChange","imageSetAvailable","styles","value","item","i","image","label","App","event","setState","textSearchField","target","filter","obj","state","fetch","then","response","json","jsonMonsters","filteredMonsters","this","includes","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qHACAA,EAAOC,QAAU,CAAC,aAAa,iC,gBCA/BD,EAAOC,QAAU,CAAC,KAAO,qB,gBCAzBD,EAAOC,QAAU,CAAC,SAAW,8B,gBCA7BD,EAAOC,QAAU,CAAC,eAAiB,yCAAyC,aAAa,uC,wNCW1EC,EATG,SAAAC,GAAK,OACnB,2BACIC,UAAWC,IAAgB,cAC3BC,KAAK,SACLC,YAAW,iBAAYJ,EAAMK,MAAMC,eACnCC,SAAUP,EAAMQ,kB,gBCETC,EARF,SAAAT,GAAK,OACV,yBAAKC,UAAWS,IAAWC,MACvB,yBAAKC,IAAI,QAAQC,IAAG,+BAA0Bb,EAAMc,QAAQC,GAAxC,gBAAkDf,EAAMgB,SAAxD,mBACpB,4BAAKhB,EAAMc,QAAQG,MACnB,2BAAIjB,EAAMc,QAAQI,S,gBCMfC,EARE,SAAAnB,GAAK,OAClB,yBAAKC,UAAWmB,IAAeC,UAC1BrB,EAAMsB,SAASC,KAAI,SAAAT,GAAO,OACnB,kBAAC,EAAD,CAAMU,IAAKV,EAAQC,GAAID,QAASA,EAASE,SAAUhB,EAAMgB,gB,gBCoB1DS,EAxBQ,SAAC,GAAmD,IAAlDT,EAAiD,EAAjDA,SAASU,EAAwC,EAAxCA,iBAAiBC,EAAuB,EAAvBA,kBAE/C,OACI,6BAII,4BAAQ1B,UAAW2B,IAAO,cAAeC,MAAOb,EAAUT,SAAUmB,GAI5DC,EAAkBJ,KAAI,SAACO,EAAKC,GAAN,OAClB,4BAAQP,IAAKO,EAAGF,MAAOC,EAAKE,OAAQF,EAAKG,UALrD,kBCHNN,EAAoB,CACxB,CACIM,MAAO,cACPD,MAAO,QAEX,CACIC,MAAO,kBACPD,MAAO,QAEX,CACIC,MAAO,oBACPD,MAAO,QAEX,CACIC,MAAO,oBACPD,MAAO,QAEX,CACIC,MAAO,qBACPD,MAAO,QAEX,CACIC,MAAO,MACPD,MAAO,QAgDEE,E,YA3Cb,aAAc,IAAD,8BACX,+CAaF1B,eAAiB,SAAA2B,GACf,EAAKC,SAAS,CAACC,gBAAiBF,EAAMG,OAAOT,SAflC,EAiBbH,iBAAmB,SAACS,GAClB,IAAMnB,EAAWW,EAAkBY,QAAO,SAAAC,GACxC,OAAOA,EAAIR,QAAUG,EAAMG,OAAOT,SAGnC,EAAKO,SAAS,CACbpB,SAAUA,EAAS,GAAGgB,MACtB3B,MAAOW,EAAS,GAAGiB,SAtBrB,EAAKQ,MAAM,CACTnB,SAAS,GACTe,gBAAiB,GACjBrB,SAAU,OACVX,MAAO,oBANE,E,iFASO,IAAD,OACjBqC,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAY,OAAI,EAAKV,SAAS,CAACd,SAAUwB,S,+BAgB1C,IAAD,OACAC,EAAmBC,KAAKP,MAAMnB,SAASiB,QAAO,SAAAzB,GAAO,OACzDA,EAAQG,KAAKX,cAAc2C,SAAS,EAAKR,MAAMJ,gBAAgB/B,kBAEjE,OACE,yBAAKL,UAAU,aACb,4BAAK+C,KAAKP,MAAMpC,OAChB,kBAAC,EAAD,CAAgBsB,kBAAmBA,EAAmBX,SAAUgC,KAAKP,MAAMzB,SAAUU,iBAAkBsB,KAAKtB,mBAC5G,kBAAC,EAAD,CAAWlB,eAAgBwC,KAAKxC,eAAgBH,MAAO2C,KAAKP,MAAMpC,QAClE,kBAAC,EAAD,CAAUiB,SAAUyB,EAAkB/B,SAAUgC,KAAKP,MAAMzB,gB,GAtCjDkC,IAAMC,WCtBJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMpB,MAAK,SAAAqB,GACjCA,EAAaC,kB","file":"static/js/main.94fbe715.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"search-box\":\"search-box_search-box__1oYdq\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"card_card__XntQC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"cardList\":\"card-list_cardList__1s47y\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"selectImageSet\":\"select-image-set_selectImageSet__AqCIp\",\"select-css\":\"select-image-set_select-css__2k27l\"};","import React from 'react'\r\nimport SearchBoxStyles from './search-box.module.css'\r\n\r\nconst SearchBox = props => (\r\n    <input\r\n        className={SearchBoxStyles['search-box']} //css modules canâ€™t write hyphen directly. It needs to be used this way if required. It would be better to use camelcase if posible.\r\n        type='search' \r\n        placeholder={`Search ${props.title.toLowerCase()}`} \r\n        onChange={props.onSearchChange}\r\n    />\r\n)\r\n\r\nexport default SearchBox","import React from 'react'\r\nimport CardStyles from './card.module.css'\r\nconst Card = props => (\r\n        <div className={CardStyles.card}>\r\n            <img alt=\"Robot\" src={`https://robohash.org/${props.monster.id}?set=${props.imageSet}&size=180x180`} />\r\n            <h2>{props.monster.name}</h2>\r\n            <p>{props.monster.email}</p>\r\n        </div>\r\n    )\r\n\r\nexport default Card","import React from 'react'\r\nimport Card from '../card/card.component'\r\nimport CardListStyles from './card-list.module.css'\r\n\r\nconst CardList = props => (\r\n    <div className={CardListStyles.cardList}>\r\n        {props.monsters.map(monster => (\r\n                <Card key={monster.id} monster={monster} imageSet={props.imageSet}/>\r\n            ))}\r\n    </div>\r\n)\r\n\r\nexport default CardList","import React from 'react'\r\nimport styles from './select-image-set.module.css'\r\n\r\nconst SelectImageSet = ({imageSet,onImageSetChange,imageSetAvailable}) => {\r\n    \r\n    return (\r\n        <div>\r\n            {/* <label>\r\n                Pick your favorite Image Set:\r\n            </label> */}\r\n            <select className={styles['select-css']} value={imageSet} onChange={onImageSetChange}>\r\n                {/* <option value={valueSet[0]}>{valueSet[0].title}</option>\r\n                <option value={valueSet[1]}>{valueSet[1].title}</option> */}\r\n                {\r\n                    imageSetAvailable.map((item,i) => (\r\n                        <option key={i} value={item.image}>{item.label}</option>\r\n                    ))\r\n                }\r\n{/*                 <option value=\"set3\">Disembodied Heads</option>\r\n                <option value=\"set4\">Beautiful Kittens</option>\r\n                <option value=\"set5\">Humans Technicians</option>\r\n                <option value=\"any\">Any</option>\r\n */}            </select>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SelectImageSet","import React from 'react'\nimport './App.style.css'\n\nimport SearchBox from './components/search-box/search-box.component'\nimport CardList from './components/card-list/card-list.component'\nimport SelectImageSet from './components/select-image-set/select-image-set.component'\n\nconst imageSetAvailable = [\n  {\n      label: 'Robofriends',\n      image: 'set1'\n  },\n  {\n      label: 'Monster Rolodex',\n      image: 'set2'\n  },\n  {\n      label: 'Disembodied Heads',\n      image: 'set3'\n  },\n  {\n      label: 'Beautiful Kittens',\n      image: 'set4'\n  },\n  {\n      label: 'Humans Technicians',\n      image: 'set5'\n  },\n  {\n      label: 'Any',\n      image: 'any'\n  }\n]\n\nclass App extends React.Component{\n  constructor(){\n    super()\n    this.state={\n      monsters:[],\n      textSearchField: '',\n      imageSet: 'set2',\n      title: 'Monsters Rolodex'\n    }\n  }\n  componentDidMount(){\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(jsonMonsters => this.setState({monsters: jsonMonsters}))\n  }\n  onSearchChange = event => {\n    this.setState({textSearchField: event.target.value})\n  }\n  onImageSetChange = (event) => {\n    const imageSet = imageSetAvailable.filter(obj => {\n      return obj.image === event.target.value\n    })\n  \n     this.setState({\n      imageSet: imageSet[0].image,\n      title: imageSet[0].label\n    })\n  }\n\n  render(){\n    const filteredMonsters = this.state.monsters.filter(monster => \n      monster.name.toLowerCase().includes(this.state.textSearchField.toLowerCase())\n    )\n    return (\n      <div className='container'>\n        <h1>{this.state.title}</h1>\n        <SelectImageSet imageSetAvailable={imageSetAvailable} imageSet={this.state.imageSet} onImageSetChange={this.onImageSetChange}/>\n        <SearchBox onSearchChange={this.onSearchChange} title={this.state.title} />\n        <CardList monsters={filteredMonsters} imageSet={this.state.imageSet}/>\n      </div>\n      )\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}